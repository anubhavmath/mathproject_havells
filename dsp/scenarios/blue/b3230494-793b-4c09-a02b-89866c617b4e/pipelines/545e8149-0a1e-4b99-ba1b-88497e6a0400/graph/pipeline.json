{
    "properties": {},
    "description": "test_data_ml - model_train",
    "processes": {
        "submitmetrics1": {
            "component": "com.sap.ml.submitMetrics",
            "metadata": {
                "label": "Submit Metrics",
                "x": 485.9999990463257,
                "y": 12,
                "height": 80,
                "width": 120,
                "extensible": false,
                "config": {}
            }
        },
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3",
                "x": 285,
                "y": 130.99999976158142,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "metadata": {},
                    "script": "import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom hdfs import InsecureClient\nfrom sklearn.metrics import recall_score\nimport io\n\n# Example Python script to perform training on input data & generate Metrics & Model Blob\ndef on_input(data):\n    data_stream= io.StringIO(data)\n    train_df=pd.read_csv(data_stream,names=[\"PassengerId\",\n    \"Survived\",\n    \"Pclass\",\n    \"Name\",\n    \"Sex\",\n    \"Age\",\n    \"SibSp\",\n    \"Parch\",\n    \"Ticket\",\n    \"Fare\",\n    \"Cabin\",\n    \"Embarked\"])\n    \n    train_df=train_df[['Age','Sex','Survived','Pclass']]\n    \n    X_train = train_df.drop(\"Survived\", axis=1)\n    Y_train = train_df[\"Survived\"]\n    \n    sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\n    sgd.fit(X_train[:450], Y_train[:450])\n    Y_pred = sgd.predict(X_train[450:])\n    \n    sgd.score(X_train[450:], Y_train[450:])\n    \n    acc_sgd = round(sgd.score(X_train[450:], Y_train[450:]) * 100, 2)\n    print('Accuracy of sgd model: ',acc_sgd)\n    \n    rec=recall_score(Y_train[450:], sgd.predict(X_train[450:]))\n    final_metrics={\"accuracy\":str(acc_sgd),\"recall\":str(rec),\"data_size_n\":str(len(train_df))}\n    print(final_metrics)\n    \n    # to send metrics to the Submit Metrics operator, create a Python dictionary of key-value pairs\n    #metrics_dict = {\"kpi1\": \"1\"}\n    \n    # send the metrics to the output port - Submit Metrics operator will use this to persist the metrics \n    api.send(\"metrics\", api.Message(final_metrics))\n\n    # create & send the model blob to the output port - Artifact Producer operator will use this to persist the model and create an artifact ID\n    import pickle\n    model_blob = pickle.dumps(sgd)\n    api.send(\"modelBlob\", model_blob)\n    \n    #model_blob = bytes(\"example\", 'utf-8')\n    #api.send(\"modelBlob\", model_blob)\n    \napi.set_port_callback(\"input\", on_input)\n\n"
                },
                "additionalinports": [
                    {
                        "name": "input",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "metrics",
                        "type": "message"
                    },
                    {
                        "name": "modelBlob",
                        "type": "blob"
                    }
                ]
            }
        },
        "python3operator2": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Operators Complete",
                "x": 1002.9999961853027,
                "y": 130.99999976158142,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "# When both input ports signals arive, the Artifact Producer & Submit Metrics have completed - safe to terminate the graph.\n\ndef on_inputs_ready(metrics_resp, artifact_id):\n    # both input ports have data - previous operators have completed. Send a message as output to stop the graph\n    api.send(\"output\", api.Message(\"Operators complete.\"))\n\napi.set_port_callback([\"metricsResponse\", \"artifactId\"], on_inputs_ready)\n\n"
                },
                "additionalinports": [
                    {
                        "name": "metricsResponse",
                        "type": "message"
                    },
                    {
                        "name": "artifactId",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "message"
                    }
                ]
            }
        },
        "tostringconverter2": {
            "component": "com.sap.util.toStringConverter",
            "metadata": {
                "label": "ToString Converter",
                "x": 186,
                "y": 145.99999976158142,
                "height": 50,
                "width": 50,
                "config": {}
            }
        },
        "tomessageconverter1": {
            "component": "com.sap.util.toMessageConverter",
            "metadata": {
                "label": "ToMessage Converter",
                "x": 520.4999990463257,
                "y": 132,
                "height": 50,
                "width": 50,
                "config": {}
            }
        },
        "artifactproducer1": {
            "component": "com.sap.ml.artifact.producer.v2",
            "metadata": {
                "label": "Artifact Producer",
                "x": 686.9999980926514,
                "y": 131.49999976158142,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "artifactKind": "model",
                    "artifactName": "${newArtifactName}"
                }
            }
        },
        "readfile2": {
            "component": "com.sap.file.read",
            "metadata": {
                "label": "Read File",
                "x": 17,
                "y": 130.99999976158142,
                "height": 80,
                "width": 120,
                "config": {
                    "mode": "Once",
                    "path": "${inputFilePath}",
                    "connection": {
                        "configurationType": "Connection Management",
                        "connectionID": "DI_DATA_LAKE"
                    }
                }
            }
        },
        "tostringconverter3": {
            "component": "com.sap.util.toStringConverter",
            "metadata": {
                "label": "ToString Converter",
                "x": 887.999997138977,
                "y": 160.49999952316284,
                "height": 50,
                "width": 50,
                "config": {}
            }
        },
        "writefile1": {
            "component": "com.sap.file.write",
            "metadata": {
                "label": "Write File",
                "x": 485.9999990463257,
                "y": 222,
                "height": 80,
                "width": 120,
                "config": {
                    "connection": {
                        "configurationType": "Connection Management",
                        "connectionID": "DI_DATA_LAKE"
                    },
                    "pathMode": "Static (from configuration)",
                    "path": "/shared/havells_trail/raw/sgd_model_arti",
                    "mode": "Overwrite"
                }
            }
        },
        "wiretap1": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 1179,
                "y": 136,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        }
    },
    "groups": [
        {
            "name": "group2",
            "nodes": [
                "submitmetrics1"
            ],
            "metadata": {
                "description": "Group"
            }
        },
        {
            "name": "group1",
            "nodes": [
                "python3operator1"
            ],
            "metadata": {
                "description": "Group"
            },
            "tags": {
                "marathontimes": ""
            }
        }
    ],
    "connections": [
        {
            "metadata": {
                "points": "409,161.99999976158142 436.99999952316284,161.99999976158142 436.99999952316284,52 480.9999990463257,52"
            },
            "src": {
                "port": "metrics",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "metrics",
                "process": "submitmetrics1"
            }
        },
        {
            "metadata": {
                "points": "609.9999990463257,52 637.9999985694885,52 637.9999985694885,102.50000023841858 838.9999976158142,102.50000023841858 838.9999976158142,131.5 969.9999966621399,131.5 969.9999966621399,161.99999976158142 997.9999961853027,161.99999976158142"
            },
            "src": {
                "port": "response",
                "process": "submitmetrics1"
            },
            "tgt": {
                "port": "metricsResponse",
                "process": "python3operator2"
            }
        },
        {
            "metadata": {
                "points": "141,161.99999976158142 181,161.99999976158142"
            },
            "src": {
                "port": "file",
                "process": "readfile2"
            },
            "tgt": {
                "port": "ininterface",
                "process": "tostringconverter2"
            }
        },
        {
            "metadata": {
                "points": "240,170.99999976158142 280,170.99999976158142"
            },
            "src": {
                "port": "outstring",
                "process": "tostringconverter2"
            },
            "tgt": {
                "port": "input",
                "process": "python3operator1"
            }
        },
        {
            "metadata": {
                "points": "810.9999980926514,153.49999976158142 854.9999976158142,153.49999976158142 854.9999976158142,194.49999952316284 882.999997138977,194.49999952316284"
            },
            "src": {
                "port": "outArtifact",
                "process": "artifactproducer1"
            },
            "tgt": {
                "port": "inmessage",
                "process": "tostringconverter3"
            }
        },
        {
            "metadata": {
                "points": "941.999997138977,185.49999952316284 969.9999966621399,185.49999952316284 969.9999966621399,179.99999976158142 997.9999961853027,179.99999976158142"
            },
            "src": {
                "port": "outstring",
                "process": "tostringconverter3"
            },
            "tgt": {
                "port": "artifactId",
                "process": "python3operator2"
            }
        },
        {
            "metadata": {
                "points": "810.9999980926514,189.49999976158142 838.9999976158142,189.49999976158142 838.9999976158142,239.49999928474426 653.9999985694885,239.49999928474426 653.9999985694885,329.99999952316284 452.99999952316284,329.99999952316284 452.99999952316284,262 480.9999990463257,262"
            },
            "src": {
                "port": "outFileSend",
                "process": "artifactproducer1"
            },
            "tgt": {
                "port": "file",
                "process": "writefile1"
            }
        },
        {
            "metadata": {
                "points": "609.9999990463257,253 637.9999985694885,253 637.9999985694885,180.49999976158142 681.9999980926514,180.49999976158142"
            },
            "src": {
                "port": "file",
                "process": "writefile1"
            },
            "tgt": {
                "port": "inFileReturn",
                "process": "artifactproducer1"
            }
        },
        {
            "metadata": {
                "points": "409,179.99999976158142 452.99999952316284,179.99999976158142 452.99999952316284,148 515.4999990463257,148"
            },
            "src": {
                "port": "modelBlob",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "inbody",
                "process": "tomessageconverter1"
            }
        },
        {
            "metadata": {
                "points": "574.4999990463257,157 637.9999985694885,157 637.9999985694885,162.49999976158142 681.9999980926514,162.49999976158142"
            },
            "src": {
                "port": "out",
                "process": "tomessageconverter1"
            },
            "tgt": {
                "port": "inArtifact",
                "process": "artifactproducer1"
            }
        },
        {
            "metadata": {
                "points": "1126.9999961853027,170.99999976158142 1150.5,171 1150.5,176 1174,176"
            },
            "src": {
                "port": "output",
                "process": "python3operator2"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap1"
            }
        }
    ],
    "inports": {},
    "outports": {}
}